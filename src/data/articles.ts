export interface Article {
  slug: string;
  title: string;
  description: string;
  date: string;
  readTime: string;
  tags: string[];
  image?: string;
  content: string;
}

export interface Theme {
  id: string;
  name: string;
  description: string;
  icon: string;
  color: string;
  bgColor: string;
  articles: Article[];
}

export const themes: Theme[] = [
  {
    id: 'arquitetura-software',
    name: 'Arquitetura de Software',
    description: 'Conceitos fundamentais sobre arquitetura, padr√µes de design e boas pr√°ticas de engenharia de software',
    icon: 'üèóÔ∏è',
    color: 'text-blue-400',
    bgColor: 'bg-blue-500/20',
    articles: [
      {
        slug: 'levantamento-analise-requisitos',
        title: 'Levantamento e An√°lise de Requisitos',
        description: 'Do Sonho ao C√≥digo: O Guia Definitivo Sobre Requisitos de Software. Aprenda o ciclo completo desde a ideia inicial at√© uma lista de tarefas pronta para ser codificada.',
        date: '09 Out 2025',
        readTime: '12 min',
        tags: ['Engenharia de Software', 'Requisitos', 'Gest√£o de Projetos'],
        image: '/requisitos.png',
        content: `
# Do Sonho ao C√≥digo: O Guia Definitivo Sobre Requisitos de Software

Todo desenvolvedor, seja iniciante ou experiente, j√° sentiu o medo de passar meses construindo um software para, no final, descobrir que n√£o era bem aquilo que o cliente queria. Esse problema quase sempre tem a mesma origem: uma falha na compreens√£o dos requisitos.

Entender os requisitos √© como ter a planta de uma casa antes de come√ßar a construir. Sem ela, voc√™ est√° apenas empilhando tijolos e torcendo pelo melhor.

Neste guia, vamos desmistificar o ciclo de vida dos requisitos de uma forma simples, clara e com analogias, mostrando o caminho desde a ideia inicial at√© uma lista de tarefas pronta para ser codificada.

![Diagrama do Processo de Requisitos](/requisitos.png)

## A Grande Etapa: Levantamento e An√°lise de Requisitos

Antes de pensar em c√≥digo, banco de dados ou design, precisamos passar por uma fase de investiga√ß√£o. O objetivo √© responder a uma √∫nica pergunta em diferentes n√≠veis de detalhe: **"O que vamos construir?"**. Essa fase se divide em tr√™s passos fundamentais.

### Passo 1: Requisitos de Neg√≥cio (O "Porqu√™")

Tudo come√ßa com o "porqu√™". Antes de qualquer funcionalidade, precisamos entender o objetivo maior, o valor que o software trar√° para o mundo.

**Analogia:** Pense nos futuros donos da casa. Eles n√£o dizem ao arquiteto "eu quero uma viga de a√ßo de 12 polegadas". Eles dizem: "Por que queremos a casa?".

- "Precisamos de mais espa√ßo para a nossa fam√≠lia que est√° crescendo."
- "Queremos um lugar para receber amigos e socializar."
- "Nosso objetivo √© ter um lar seguro e economizar energia."

No software, as perguntas-chave para descobrir os **Requisitos de Neg√≥cio** s√£o:

- Qual problema este software resolve?
- Quem √© o p√∫blico-alvo?
- Como saberemos que este projeto foi um sucesso? (Ex: aumentar as vendas, reduzir custos, etc.)

O resultado deste passo √© a **vis√£o clara do projeto**.

### Passo 2: Requisitos de Usu√°rio (O "O Qu√™" do Usu√°rio)

Com o "porqu√™" definido, descemos um n√≠vel e focamos em quem vai usar o sistema e o que essa pessoa precisa fazer. A ferramenta mais poderosa para isso s√£o as **Hist√≥rias de Usu√°rio** (User Stories).

**Analogia:** Os donos da casa agora descrevem as a√ß√µes que realizar√£o.

*"Como um anfitri√£o, eu quero uma cozinha aberta integrada √† sala, para que eu possa cozinhar e conversar com meus convidados ao mesmo tempo."*

O formato √© sempre: **Como um(a) <tipo de usu√°rio>, eu quero <fazer uma a√ß√£o>, para que <eu possa alcan√ßar um objetivo>**.

Este formato nos for√ßa a pensar na funcionalidade (cozinha aberta) sob a perspectiva de quem a usa (anfitri√£o) e a justificar sua exist√™ncia (para conversar com os convidados).

### Passo 3: Requisitos de Sistema (A Especifica√ß√£o T√©cnica do "O Qu√™")

Agora, traduzimos os desejos do usu√°rio em instru√ß√µes claras para os construtores (desenvolvedores). √â aqui que detalhamos o comportamento do sistema. Eles se dividem em dois tipos:

- **Funcionais:** O que o sistema efetivamente faz.
- **N√£o Funcionais:** Como o sistema se comporta (suas qualidades).

**Analogia:** O arquiteto pega a hist√≥ria da "cozinha aberta" e a transforma em especifica√ß√µes na planta.

- **Requisito Funcional:** O sistema de exaust√£o da cozinha deve ser capaz de renovar o ar a cada 5 minutos.
- **Requisito N√£o Funcional:** O n√≠vel de ru√≠do do exaustor n√£o deve ultrapassar 50 decib√©is para n√£o atrapalhar a conversa (performance/usabilidade).

## Atividade Essencial: Prioriza√ß√£o (O Que Vem Primeiro?)

Voc√™ terminou os tr√™s passos e agora tem uma lista gigante de requisitos. E agora? Constru√≠mos tudo de uma vez? N√£o. Precisamos de uma ferramenta para organizar essa lista: a **prioriza√ß√£o**.

Essa n√£o √© uma nova fase, mas sim uma atividade crucial que acontece durante todo o levantamento de requisitos. A t√©cnica mais famosa para isso √© a **MoSCoW**.

**Analogia:** √â como fazer uma lista de compras. Voc√™ lista tudo que quer (leite, ovos, sorvete, champanhe), mas depois olha a carteira e a necessidade, e decide o que √© essencial para aquela semana.

A **MoSCoW** classifica cada requisito em quatro categorias:

### üèÜ M - Must Have (Essencial)

Sem isso, o produto n√£o tem valor. √â o cora√ß√£o do sistema. Se n√£o tiver, o lan√ßamento n√£o faz sentido. (Ex: Leite e ovos na lista de compras).

### üëç S - Should Have (Deveria Ter)

Importante, mas n√£o vital. O produto funciona sem, mas a experi√™ncia fica pobre ou incompleta. (Ex: O sorvete para a sobremesa).

### ü§î C - Could Have (Poderia Ter)

Desej√°vel, mas com baixo impacto se n√£o for feito. √â o "perfume". (Ex: Aquela marca importada de azeite).

### ‚ùå W - Won't Have (N√£o Ter√°... por agora)

Funcionalidades que ficam explicitamente para o futuro, para garantir o foco no que √© mais importante. (Ex: O champanhe pode ficar para uma ocasi√£o especial).

## O Ciclo em A√ß√£o

Na pr√°tica, o fluxo √© cont√≠nuo:

1. Voc√™ identifica uma **Hist√≥ria de Usu√°rio** (Ex: "Exportar plano alimentar para PDF").
2. Imediatamente, voc√™ a classifica usando **MoSCoW** (Ex: O cliente diz que √© importante, mas n√£o vital para o primeiro dia, ent√£o √© um **Should Have**).
3. A hist√≥ria entra na sua lista de tarefas (**backlog**) j√° priorizada.

Ao final da fase de requisitos, voc√™ n√£o tem apenas uma lista de desejos, mas um **plano de a√ß√£o priorizado**, pronto para ser desenhado (fase de Design) e, finalmente, codificado.

---

## Conclus√£o

Entender este ciclo √© o que diferencia a constru√ß√£o de um software bem-sucedido de um projeto destinado ao fracasso. Foque no "porqu√™", escute o usu√°rio, detalhe o comportamento e, acima de tudo, **priorize o que gera mais valor**.

Lembre-se: requisitos n√£o s√£o apenas documentos burocr√°ticos. Eles s√£o a ponte entre o sonho do cliente e o c√≥digo que voc√™ vai escrever. Construa essa ponte com cuidado, e o sucesso do projeto ser√° uma consequ√™ncia natural.
        `
      }
    ]
  },
  {
    id: 'design-patterns',
    name: 'Design Patterns',
    description: 'Padr√µes de projeto fundamentais para desenvolvimento de software',
    icon: 'ÔøΩ',
    color: 'text-purple-400',
    bgColor: 'bg-purple-500/20',
    articles: [
      {
        slug: 'abstract-factory-pattern',
        title: 'Abstract Factory - O Padr√£o da F√°brica de F√°bricas',
        description: 'Entenda o padr√£o Abstract Factory atrav√©s de uma analogia simples com uma montadora de brinquedos LEGO. Aprenda como criar fam√≠lias de objetos relacionados sem misturar temas.',
        date: '06 Out 2025',
        readTime: '8 min',
        tags: ['Design Patterns', 'Programa√ß√£o', 'Arquitetura'],
        content: `
# Abstract Factory

Imagine que voc√™ √© o dono de uma montadora de brinquedos, como a LEGO.

## O Problema que Voc√™ Enfrenta

Voc√™ tem diferentes "temas" de LEGO: **LEGO Star Wars**, **LEGO City (Cidade)** e **LEGO Harry Potter**.

Dentro de cada tema, voc√™ tem pe√ßas que se relacionam:

- **Tema Star Wars:** tem o boneco do Luke Skywalker, a nave X-Wing e o sabre de luz.
- **Tema Cidade:** tem o boneco do policial, o carro de pol√≠cia e as algemas.
- **Tema Harry Potter:** tem o boneco do Harry, o castelo de Hogwarts e a varinha m√°gica.

O grande problema √©: voc√™ **NUNCA** pode misturar as coisas! Um cliente que compra um kit de Star Wars ficaria furioso se, no meio das pe√ßas da X-Wing, ele encontrasse a varinha m√°gica do Harry Potter. As pe√ßas de um tema s√≥ fazem sentido juntas.

Al√©m disso, no ano que vem, voc√™ quer lan√ßar o **LEGO Senhor dos An√©is**. Voc√™ precisa de uma forma de adicionar esse novo tema sem ter que redesenhar toda a sua linha de produ√ß√£o.

![Diagrama do Padr√£o Abstract Factory](/abstract.png)

## A Solu√ß√£o: O "Abstract Factory" (A F√°brica de F√°bricas)

Para resolver isso, voc√™ cria um sistema genial.

### 1. O Chefe de Design (A Interface "F√°brica Abstrata")

Voc√™ contrata um "Chefe de Design". Ele n√£o constr√≥i nenhum brinquedo. A √∫nica fun√ß√£o dele √© criar as **regras** para todas as f√°bricas de temas. Ele diz:

*"Toda f√°brica de temas de LEGO que existir **PRECISA** ser capaz de fazer tr√™s coisas:*

1. *Criar um Personagem*
2. *Criar um Ve√≠culo/Constru√ß√£o*
3. *Criar um Acess√≥rio"*

Essa lista de regras √© a nossa **F√°brica Abstrata**. √â um contrato, um manual de instru√ß√µes para criar outras f√°bricas.

### 2. Os Gerentes de Tema (As F√°bricas Concretas)

Agora, para cada tema, voc√™ contrata um "Gerente" que segue as regras do Chefe de Design:

- **Gerente do Tema Star Wars:** Quando voc√™ pede a ele "Crie um Personagem", ele te entrega um **Luke Skywalker**. Quando pede "Crie um Ve√≠culo", ele te entrega uma **X-Wing**.
- **Gerente do Tema Cidade:** Quando voc√™ pede a ele "Crie um Personagem", ele te entrega um **Policial**. Quando pede "Crie um Acess√≥rio", ele te entrega as **Algemas**.
- **Gerente do Tema Harry Potter:** Quando voc√™ pede a ele "Crie um Personagem", ele te entrega um **Harry Potter**.

Cada um desses gerentes √© uma **F√°brica Concreta**. Eles sabem exatamente como construir as pe√ßas do seu tema espec√≠fico, garantindo que tudo combine perfeitamente.

### 3. Voc√™, o Cliente

Agora, imagine que voc√™ quer montar um kit de Star Wars. Voc√™ n√£o vai at√© a prateleira e pega "um boneco Luke Skywalker" e "uma nave X-Wing". Isso seria muito trabalhoso e voc√™ poderia se confundir.

Em vez disso, voc√™ simplesmente vai at√© o **"Gerente do Tema Star Wars"** (a nossa f√°brica) e diz:

- "Me d√™ um personagem."
- "Me d√™ um ve√≠culo."
- "Me d√™ um acess√≥rio."

Voc√™ n√£o precisa saber os detalhes de como ele faz isso. Voc√™ s√≥ precisa confiar que, como est√° falando com o gerente de Star Wars, **tudo o que ele te entregar ser√° do universo Star Wars e ir√° combinar**.

---

## Resumo da Analogia

- **F√°brica Abstrata (O Chefe):** √â o manual de regras que diz o que **toda fam√≠lia de produtos** deve ter (ex: todo tema LEGO precisa ter personagem, ve√≠culo e acess√≥rio).
- **F√°bricas Concretas (Os Gerentes de Tema):** S√£o as f√°bricas especialistas que sabem criar os produtos de **um tema espec√≠fico** (a f√°brica de Star Wars, a de Cidade, etc.).
- **Produtos (As Pe√ßas de LEGO):** S√£o os objetos finais que voc√™ recebe (Luke Skywalker, carro de pol√≠cia, etc.).
- **Cliente (Voc√™):** Voc√™ escolhe qual **Gerente de Tema** quer usar e pede os produtos a ele, sem se preocupar com os detalhes. O resultado √© sempre um conjunto de pe√ßas que combinam.

**Principal Vantagem:** Se amanh√£ voc√™ quiser criar o tema **LEGO Senhor dos An√©is**, voc√™ n√£o precisa mudar nada no seu sistema. Voc√™ s√≥ precisa contratar um novo "Gerente do Tema Senhor dos An√©is" que siga as mesmas regras do "Chefe de Design" e saiba criar o Frodo, a Sociedade do Anel e o Um Anel.
        `
      }
    ]
  },
  {
    id: 'aws',
    name: 'AWS',
    description: 'Guias e tutoriais sobre Amazon Web Services e cloud computing',
    icon: '‚òÅÔ∏è',
    color: 'text-orange-400',
    bgColor: 'bg-orange-500/20',
    articles: [
      {
        slug: 'fundamentos-aws-computacao-nuvem',
        title: 'Fundamentos Essenciais da Nuvem AWS - M√≥dulo 1',
        description: 'Entenda o que √© computa√ß√£o em nuvem atrav√©s de analogias pr√°ticas e compara√ß√µes reais. Aprenda por que a AWS √© como a energia el√©trica da sua casa e como isso pode revolucionar seu neg√≥cio.',
        date: '07 Out 2025',
        readTime: '12 min',
        tags: ['AWS', 'Cloud Computing', 'Fundamentos'],
        image: '/aws1.jpeg',
        content: `
## M√≥dulo 1: Fundamentos Essenciais da Nuvem AWS

### Microbloco 1.1: O que √© Computa√ß√£o em Nuvem?

**1. O Contexto (O "Porqu√™")**

Imagine que voc√™ e sua equipe acabaram de finalizar a primeira vers√£o do seu **software**. O pr√≥ximo passo √© disponibiliz√°-lo para os primeiros clientes. No passado (e ainda hoje em algumas empresas), voc√™ precisaria:

1.  Comprar um servidor f√≠sico (uma m√°quina potente).
2.  Alugar um espa√ßo em um data center para hospedar esse servidor (com ar condicionado, energia redundante, seguran√ßa f√≠sica).
3.  Instalar o sistema operacional, o banco de dados e todas as depend√™ncias.
4.  Configurar a rede e a seguran√ßa.

Isso custa muito dinheiro (investimento inicial) e tempo. E se o **software** fizer um sucesso estrondoso e voc√™ precisar de 10 vezes mais capacidade da noite para o dia? Voc√™ teria que repetir todo o processo, correndo o risco de perder clientes enquanto isso. A computa√ß√£o em nuvem nasceu para resolver exatamente esse problema.

**2. A Mat√©ria (O "O qu√™")**

**Computa√ß√£o em Nuvem** (Cloud Computing) √© a entrega de recursos de tecnologia (como servidores, armazenamento, bancos de dados, redes e software) sob demanda, pela internet, com um modelo de pre√ßo de "pagamento conforme o uso" (pay-as-you-go).

Em vez de comprar e manter sua pr√≥pria infraestrutura, voc√™ pode alugar esses recursos de um provedor de nuvem, como a Amazon Web Services (AWS).

**3. A Analogia**

Pense na computa√ß√£o em nuvem como a **energia el√©trica** üîå da sua casa.

Voc√™ n√£o constr√≥i uma usina hidrel√©trica no seu quintal para ter luz. Voc√™ simplesmente se conecta √† rede el√©trica da cidade e paga apenas pela energia que consome no final do m√™s. Se um dia voc√™ compra um ar-condicionado novo e consome mais energia, sua conta aumenta. Se voc√™ viaja e desliga tudo, sua conta diminui.

A AWS √© a "companhia de energia" para a sua empresa de software. Voc√™ "pluga" sua aplica√ß√£o (o **software**) na infraestrutura deles e paga apenas pelos recursos que seu software utiliza.

**4. M√£os na Massa (Aplica√ß√£o Real)**

Vamos criar um quadro de planejamento para o lan√ßamento do software, comparando o modelo tradicional com o modelo em nuvem. Isso √© uma ferramenta √∫til para justificar a escolha da nuvem para um cliente ou gerente.

**Cen√°rio:** Lan√ßamento de um novo software para os primeiros 100 usu√°rios.

| Recurso Necess√°rio | **Abordagem Tradicional (Servidor Pr√≥prio)** | **Abordagem em Nuvem (AWS)** |
| :--- | :--- | :--- |
| **Servidor Web** | Compra de um servidor f√≠sico: **R$ 8.000** | Aluguel de um servidor virtual (EC2): **~R$ 80/m√™s** |
| **Banco de Dados** | Instala√ß√£o e licenciamento de software: **R$ 2.000** | Uso de um servi√ßo de banco de dados (RDS): **~R$ 100/m√™s** |
| **Armazenamento** | Compra de discos (HDs/SSDs): **R$ 1.500** | Armazenamento de objetos (S3): **Paga por GB, centavos** |
| **Manuten√ß√£o/Tempo**| Contrata√ß√£o de um especialista ou tempo da sua equipe | Gerenciado pela AWS, foco total no seu c√≥digo |
| **Investimento Inicial** | **~ R$ 11.500** | **~ R$ 180** (para o primeiro m√™s) |

### Conclus√£o do M√≥dulo 1

A computa√ß√£o em nuvem n√£o √© apenas uma tend√™ncia tecnol√≥gica, √© uma mudan√ßa fundamental na forma como consumimos recursos de TI. Assim como n√£o pensamos duas vezes antes de ligar uma l√¢mpada (confiando que a energia el√©trica estar√° dispon√≠vel), a AWS permite que voc√™ se concentre no que realmente importa: desenvolver seu software e atender seus clientes.

No pr√≥ximo m√≥dulo, vamos explorar os principais servi√ßos da AWS e como eles se conectam para formar uma solu√ß√£o completa.
        `
      }
    ]
  }
];

// Manter compatibilidade com a estrutura antiga
export const articles: Article[] = themes.flatMap(theme => theme.articles);

export function getArticleBySlug(slug: string): Article | undefined {
  return articles.find(article => article.slug === slug);
}

export function getAllArticles(): Article[] {
  return articles;
}

export function getAllThemes(): Theme[] {
  return themes;
}

export function getThemeById(id: string): Theme | undefined {
  return themes.find(theme => theme.id === id);
}

export function getArticlesByTheme(themeId: string): Article[] {
  const theme = getThemeById(themeId);
  return theme ? theme.articles : [];
}